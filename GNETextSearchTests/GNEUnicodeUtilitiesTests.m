//
//  GNEUnicodeUtilitiesTests.m
//  GNETextSearch
//
//  Created by Anthony Drendel on 1/2/16.
//  Copyright ¬© 2016 Gone East LLC. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "GNEUnicodeUtilities.h"
#import "GNETextSearchPrivate.h"


// ------------------------------------------------------------------------------------------


@interface GNEUnicodeUtilitiesTests : XCTestCase

@end


// ------------------------------------------------------------------------------------------


@implementation GNEUnicodeUtilitiesTests


// ------------------------------------------------------------------------------------------
#pragma mark - Set Up / Tear Down
// ------------------------------------------------------------------------------------------
- (void)setUp
{
    [super setUp];
}


- (void)tearDown
{
    [super tearDown];
}


// ------------------------------------------------------------------------------------------
#pragma mark - Tokenize
// ------------------------------------------------------------------------------------------
- (void)testTokenize_HelloAnthony_TwoTokens
{
    NSString *string = @"Hello Anthony";
    NSArray *expected = @[@"Hello", @"Anthony"];

    NSMutableArray *processedTokens = [NSMutableArray array];
    GNEUnicodeTokenizeString(string.UTF8String, p_processTestToken, (__bridge void *)processedTokens);
    XCTAssertEqualObjects(expected, processedTokens);
}


- (void)testTokenize_SpaceHelloAnthonySpace_TwoTokens
{
    NSString *string = @" Hello Anthony ";
    NSArray *expected = @[@"Hello", @"Anthony"];

    NSMutableArray *processedTokens = [NSMutableArray array];
    GNEUnicodeTokenizeString(string.UTF8String, p_processTestToken, (__bridge void *)processedTokens);
    XCTAssertEqualObjects(expected, processedTokens);
}


- (void)testTokenize_NiHaoAnthony_TwoTokens
{
    NSString *string = @"‰Ω†Â•Ω Anthony";
    NSArray *expected = @[@"‰Ω†Â•Ω", @"Anthony"];

    NSMutableArray *processedTokens = [NSMutableArray array];
    GNEUnicodeTokenizeString(string.UTF8String, p_processTestToken, (__bridge void *)processedTokens);
    XCTAssertEqualObjects(expected, processedTokens);
}

- (void)testTokenizeTwoLongTokens
{
    NSString *string = @"AnthonyIsAwesomeAndThisIsOneLongToken ThisIsOneLongButShorterToken";
    NSArray *expected = @[@"AnthonyIsAwesomeAndThisIsOneLongToken", @"ThisIsOneLongButShorterToken"];

    NSMutableArray *processedTokens = [NSMutableArray array];
    GNEUnicodeTokenizeString(string.UTF8String, p_processTestToken, (__bridge void *)processedTokens);
    XCTAssertEqualObjects(expected, processedTokens);
}

- (void)testTokenize_WoDeMingziShiAnDongNiWithFullWidthSpaces_FiveTokens
{
    NSString *string = @" Êàë  ÁöÑ  ÂêçÂ≠ó   ÊòØ     ÂÆâ‰∏úÂ∞º     ";
    NSArray *expected = @[@"Êàë", @"ÁöÑ", @"ÂêçÂ≠ó", @"ÊòØ", @"ÂÆâ‰∏úÂ∞º"];

    NSMutableArray *processedTokens = [NSMutableArray array];
    GNEUnicodeTokenizeString(string.UTF8String, p_processTestToken, (__bridge void *)processedTokens);
    XCTAssertEqualObjects(expected, processedTokens);
}


// ------------------------------------------------------------------------------------------
#pragma mark - UTF-8 Code Points
// ------------------------------------------------------------------------------------------
- (void)testUTF8_Hello_Five
{
    NSString *string = @"Hello";
    uint32_t expected[] = {0x0048, 0x0065, 0x006C, 0x006C, 0x006F};
    [self p_assertCodePoints:expected length:5 inString:string];
}


- (void)testUTF8_NiHao_Two
{
    NSString *string = @"‰Ω†Â•Ω";
    uint32_t expected[] = {0x4F60, 0x597D};
    [self p_assertCodePoints:expected length:2 inString:string];
}


- (void)testUTF8_OkEmoji_One
{
    NSString *string = @"üëå";
    uint32_t expected[] = {0x1F44C};
    [self p_assertCodePoints:expected length:1 inString:string];
}


- (void)testUTF8_AmericanFlagEmoji_Two
{
    NSString *string = @"üá∫üá∏";
    uint32_t expected[] = {0x1F1FA, 0x1F1F8};
    [self p_assertCodePoints:expected length:2 inString:string];
}


- (void)testUTF8_FamilyEmoji_Seven
{
    NSString *string = @"üë®‚Äçüë©‚Äçüëß‚Äçüë¶";
    uint32_t expected[] = {0x1F468, 0x200D, 0x1F469, 0x200D, 0x1F467, 0x200D, 0x1F466};
    [self p_assertCodePoints:expected length:7 inString:string];
}


- (void)testUTF8_LongChineseString_1799
{
    NSString *string = [self p_longChineseString];
    uint32_t *expected = [self p_newLongChineseUnicodeCodePoints];
    [self p_assertCodePoints:expected length:1799 inString:string];
}


// ------------------------------------------------------------------------------------------
#pragma mark - UTF-8 Character Count
// ------------------------------------------------------------------------------------------
- (void)testCharCount_Hello_OnePerCodePoint
{
    uint32_t codePoints[] = {0x0048, 0x0065, 0x006C, 0x006C, 0x006F};
    for (size_t i = 0; i < 5; i++)
    {
        XCTAssertEqual(1, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[i]));
    }
}


- (void)testCharCount_NiHao_ThreePerCodePoint
{
    uint32_t codePoints[] = {0x4F60, 0x597D};
    for (size_t i = 0; i < 2; i++)
    {
        XCTAssertEqual(3, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[i]));
    }
}


- (void)testCharCount_OkEmoji_Four
{
    uint32_t codePoints[] = {0x1F44C};
    XCTAssertEqual(4, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[0]));
}


- (void)testCharCount_AmericanFlagEmoji_Five
{
    uint32_t codePoints[] = {0x1F1FA, 0x1F1F8};
    for (size_t i = 0; i < 2; i++)
    {
        XCTAssertEqual(4, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[i]));
    }
}


- (void)testCharCount_FamilyEmoji_ThreeOrFourPerCodePoint
{
    uint32_t codePoints[] = {0x1F468, 0x200D, 0x1F469, 0x200D, 0x1F467, 0x200D, 0x1F466};
    XCTAssertEqual(4, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[0]));
    XCTAssertEqual(3, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[1]));
    XCTAssertEqual(4, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[2]));
    XCTAssertEqual(3, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[3]));
    XCTAssertEqual(4, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[4]));
    XCTAssertEqual(3, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[5]));
    XCTAssertEqual(4, GNEUnicodeNumberOfCharactersForCodePoint(codePoints[6]));
}


// ------------------------------------------------------------------------------------------
#pragma mark - UTF-16 Code Points
// ------------------------------------------------------------------------------------------
- (void)testUTF16_Hello_Five
{
    NSString *string = @"Hello";
    uint32_t expected[] = {0x0048, 0x0065, 0x006C, 0x006C, 0x006F};
    [self p_assertUTF16CodePoints:expected length:5 inString:string];
}


- (void)testUTF16_NiHao_Two
{
    NSString *string = @"‰Ω†Â•Ω";
    uint32_t expected[] = {0x4F60, 0x597D};
    [self p_assertUTF16CodePoints:expected length:2 inString:string];
}


- (void)testUTF16_OkEmoji_Two
{
    NSString *string = @"üëå";
    uint32_t expected[] = {0xD83D, 0xDC4C};
    [self p_assertUTF16CodePoints:expected length:2 inString:string];
}


- (void)testUTF16_AmericanFlagEmoji_Four
{
    NSString *string = @"üá∫üá∏";
    uint32_t expected[] = {0xD83C, 0xDDFA, 0xD83C, 0xDDF8};
    [self p_assertUTF16CodePoints:expected length:4 inString:string];
}


- (void)testUTF16_FamilyEmoji_Eleven
{
    NSString *string = @"üë®‚Äçüë©‚Äçüëß‚Äçüë¶";
    uint32_t expected[] = {0xD83D, 0xDC68, 0x200D, 0xD83D, 0xDC69, 0x200D, 0xD83D, 0xDC67, 0x200D, 0xD83D, 0xDC66};
    [self p_assertUTF16CodePoints:expected length:11 inString:string];
}


// ------------------------------------------------------------------------------------------
#pragma mark - Helpers
// ------------------------------------------------------------------------------------------
- (void)p_assertCodePoints:(uint32_t *)codePoints length:(size_t)length inString:(NSString *)string
{
    const char *cString = string.UTF8String;

    uint32_t *result = NULL;
    size_t resultLength = 0;

    XCTAssertEqual(success, GNEUnicodeCopyCodePoints(cString, &result, &resultLength));
    XCTAssertEqual(length, resultLength);
    for (size_t i = 0; i < resultLength; i++)
    {
        XCTAssertEqual(codePoints[i], result[i]);
    }
}


- (void)p_assertUTF16CodePoints:(uint32_t *)codePoints length:(size_t)length inString:(NSString *)string
{
    const char *cString = string.UTF8String;

    uint32_t *result = NULL;
    size_t resultLength = 0;

    XCTAssertEqual(success, GNEUnicodeCopyUTF16CodePoints(cString, &result, &resultLength));
    XCTAssertEqual(length, resultLength);
    for (size_t i = 0; i < resultLength; i++)
    {
        XCTAssertEqual(codePoints[i], result[i]);
    }
}


void p_processTestToken(const char *string, GNERange range, uint32_t *token, size_t length, void *context)
{
    NSMutableArray *processedTokens = (__bridge NSMutableArray *)context;
    assert([processedTokens isKindOfClass:[NSMutableArray class]]);

    for (size_t i = 0; i < length; i++)
    {
        token[i] = CFSwapInt32HostToLittle(token[i]);
    }

    NSString *tokenStr = [[NSString alloc] initWithBytes:(void *)token
                                                  length:(sizeof(uint32_t) * (length))
                                                encoding:NSUTF32LittleEndianStringEncoding];
    if (tokenStr)
    {
        [processedTokens addObject:tokenStr];
    }
}


- (NSString *)p_longChineseString
{
    return @"Èò∂Á∫ßÊñó‰∫âÔºå‰∏Ä‰∫õÈò∂Á∫ßËÉúÂà©‰∫ÜÔºå‰∏Ä‰∫õÈò∂Á∫ßÊ∂àÁÅ≠‰∫Ü„ÄÇËøôÂ∞±ÊòØÂéÜÂè≤ÔºåËøôÂ∞±ÊòØÂá†ÂçÉÂπ¥Êù•ÁöÑÊñáÊòéÂè≤„ÄÇÊãøËøô‰∏™ËßÇÁÇπËß£ÈáäÂéÜÂè≤ÁöÑÂ∞±Âè´ÂÅöÂéÜÂè≤ÁöÑÂîØÁâ©‰∏ª‰πâÔºåÁ´ôÂú®Ëøô‰∏™ËßÇÁÇπÁöÑÂèçÈù¢ÁöÑÊòØÂéÜÂè≤ÁöÑÂîØÂøÉ‰∏ª‰πâ„ÄÇ„Ää‰∏¢ÊéâÂπªÊÉ≥ÔºåÂáÜÂ§áÊñó‰∫â„ÄãÔºà‰∏Ä‰πùÂõõ‰πùÂπ¥ÂÖ´ÊúàÂçÅÂõõÊó•ÔºâÔºå„ÄäÊØõÊ≥Ω‰∏úÈÄâÈõÜ„ÄãÁ¨¨ÂõõÂç∑Á¨¨‰∏ÄÂõõ‰πù‰∏ÄÈ°µ„ÄÇÂú∞‰∏ªÈò∂Á∫ßÂØπ‰∫éÂÜúÊ∞ëÁöÑÊÆãÈÖ∑ÁöÑÁªèÊµéÂâ•ÂâäÂíåÊîøÊ≤ªÂéãËø´ÔºåËø´‰ΩøÂÜúÊ∞ëÂ§öÊ¨°Âú∞‰∏æË°åËµ∑‰πâÔºå‰ª•ÂèçÊäóÂú∞‰∏ªÈò∂Á∫ßÁöÑÁªüÊ≤ª„ÄÇ‚Ä¶‚Ä¶Âú®‰∏≠ÂõΩÂ∞ÅÂª∫Á§æ‰ºöÈáåÔºåÂè™ÊúâËøô‰∫õÂÜúÊ∞ëÁöÑÈò∂Á∫ßÊñó‰∫â„ÄÅÂÜúÊ∞ëÁöÑËµ∑‰πâÂíåÂÜúÊ∞ëÁöÑÊàò‰∫âÔºåÊâçÊòØÂéÜÂè≤ÂèëÂ±ïÁöÑÁúüÊ≠£Âä®Âäõ„ÄÇ„Ää‰∏≠ÂõΩÈù©ÂëΩÂíå‰∏≠ÂõΩÂÖ±‰∫ßÂÖö„ÄãÔºà‰∏Ä‰πù‰∏â‰πùÂπ¥ÂçÅ‰∫åÊúàÔºâ„ÄÇ‰∫∫Ê∞ëÈù†Êàë‰ª¨ÂéªÁªÑÁªáÔºå‰∏≠ÂõΩÁöÑÂèçÂä®ÂàÜÂ≠êÔºåÈù†Êàë‰ª¨ÁªÑÁªáËµ∑‰∫∫Ê∞ëÂéªÊää‰ªñÊâìÂÄí„ÄÇÂá°ÊòØÂèçÂä®ÁöÑ‰∏úË•øÔºå‰Ω†‰∏çÊâìÔºå‰ªñÂ∞±‰∏çÂÄí„ÄÇËøô‰πüÂíåÊâ´Âú∞‰∏ÄÊ†∑ÔºåÊâ´Â∏ö‰∏çÂà∞ÔºåÁÅ∞Â∞òÁÖß‰æã‰∏ç‰ºöËá™Â∑±Ë∑ëÊéâ„ÄÇ„ÄäÊäóÊó•Êàò‰∫âËÉúÂà©ÂêéÁöÑÊó∂Â±ÄÂíåÊàë‰ª¨ÁöÑÊñπÈíà„ÄãÔºà‰∏Ä‰πùÂõõ‰∫îÂπ¥ÂÖ´ÊúàÂçÅ‰∏âÊó•Ôºâ„ÄäÊØõÊ≥Ω‰∏úÈÄâÈõÜ„ÄãÁ¨¨ÂõõÂç∑‰∏Ä‰∏Ä‰∏â‰∏ÄÈ°µ„ÄÇÈù©ÂëΩ‰∏çÊòØËØ∑ÂÆ¢ÂêÉÈ•≠Ôºå‰∏çÊòØÂÅöÊñáÁ´†Ôºå‰∏çÊòØÁªòÁîªÁª£Ëä±Ôºå‰∏çËÉΩÈÇ£Ê†∑ÈõÖËá¥ÔºåÈÇ£Ê†∑‰ªéÂÆπ‰∏çËø´ÔºåÊñáË¥®ÂΩ¨ÂΩ¨ÔºåÈÇ£Ê†∑Ê∏©ËâØÊÅ≠‰ø≠ËÆ©„ÄÇÈù©ÂëΩÊòØÊö¥Âä®ÔºåÊòØ‰∏Ä‰∏™Èò∂Á∫ßÊé®ÁøªÂè¶‰∏Ä‰∏™Èò∂Á∫ßÁöÑÊö¥ÁÉàÁöÑË°åÂä®„ÄÇ„ÄäÊπñÂçóÂÜúÊ∞ëËøêÂä®ËÄÉÂØüÊä•Âëä„ÄãÔºà‰∏Ä‰πù‰∫å‰∏ÉÂπ¥‰∏âÊúàÔºâ„ÄÇ‰ªÄ‰πà‰∫∫Á´ôÂú®Èù©ÂëΩ‰∫∫Ê∞ëÊñπÈù¢Ôºå‰ªñÂ∞±ÊòØÈù©ÂëΩÊ¥æÔºå‰ªÄ‰πà‰∫∫Á´ôÂú®Â∏ùÂõΩ‰∏ª‰πâÂ∞ÅÂª∫‰∏ª‰πâÂÆòÂÉöËµÑÊú¨‰∏ª‰πâÊñπÈù¢Ôºå‰ªñÂ∞±ÊòØÂèçÈù©ÂëΩÊ¥æ„ÄÇ‰ªÄ‰πà‰∫∫Âè™ÊòØÂè£Â§¥‰∏äÁ´ôÂú®Èù©ÂëΩ‰∫∫Ê∞ëÊñπÈù¢ËÄåÂú®Ë°åÂä®‰∏äÂàôÂè¶ÊòØ‰∏ÄÊ†∑Ôºå‰ªñÂ∞±ÊòØ‰∏Ä‰∏™Âè£Â§¥Èù©ÂëΩÊ¥æÔºåÂ¶ÇÊûú‰∏ç‰ΩÜÂú®Âè£Â§¥‰∏äËÄå‰∏îÂú®Ë°åÂä®‰∏ä‰πüÁ´ôÂú®Èù©ÂëΩ‰∫∫Ê∞ëÊñπÈù¢Ôºå‰ªñÂ∞±ÊòØ‰∏Ä‰∏™ÂÆåÂÖ®ÁöÑÈù©ÂëΩÊ¥æ„ÄÇÔºçÔºçÂú®‰∏≠ÂõΩ‰∫∫Ê∞ëÊîøÊ≤ªÂçèÂïÜ‰ºöËÆÆÁ¨¨‰∏ÄÂ±äÂÖ®ÂõΩÂßîÂëò‰ºöÁ¨¨‰∫åÊ¨°‰ºöËÆÆ‰∏äÁöÑÈó≠ÂπïËØç„ÄÇÔºà‰∏Ä‰πù‰∫î‚óãÂπ¥ÂÖ≠Êúà‰∫åÂçÅ‰∏âÊó•ÔºâÔºå‰∏Ä‰πù‰∫î‚óãÂπ¥ÂÖ≠Êúà‰∫åÂçÅÂõõÊó•„Ää‰∫∫Ê∞ëÊó•Êä•„Äã„ÄÇÂ¶ÇËã•‰∏çË¢´Êïå‰∫∫ÂèçÂØπÔºåÈÇ£Â∞±‰∏çÂ•Ω‰∫ÜÔºåÈÇ£‰∏ÄÂÆöÊòØÂêåÊïå‰∫∫ÂêåÊµÅÂêàÊ±°‰∫Ü„ÄÇÂ¶ÇËã•Ë¢´Êïå‰∫∫ÂèçÂØπÔºåÈÇ£Â∞±Â•Ω‰∫ÜÔºåÈÇ£Â∞±ËØÅÊòéÊàë‰ª¨ÂêåÊïå‰∫∫ÂàíÊ∏ÖÁïåÁ∫ø‰∫Ü„ÄÇ„ÄäË¢´Êïå‰∫∫ÂèçÂØπÊòØÂ•Ω‰∫ãËÄå‰∏çÊòØÂùè‰∫ã„ÄãÔºå‰∏Ä‰πù‰∏â‰πùÂπ¥‰∫îÊúà‰∫åÂçÅÂÖ≠Êó•„ÄÇÂú®ÊãøÊû™ÁöÑÊïå‰∫∫Ë¢´Ê∂àÁÅ≠‰ª•ÂêéÔºå‰∏çÊãøÊû™ÁöÑÊïå‰∫∫‰æùÁÑ∂Â≠òÂú®Ôºå‰ªñ‰ª¨ÂøÖÁÑ∂Âú∞Ë¶ÅÂíåÊàë‰ª¨‰ΩúÊãöÊ≠ªÁöÑÊñó‰∫âÔºåÊàë‰ª¨ÂÜ≥‰∏çÂèØ‰ª•ËΩªËßÜËøô‰∫õÊïå‰∫∫„ÄÇÂ¶ÇÊûúÊàë‰ª¨Áé∞Âú®‰∏çÊòØËøôÊ†∑Âú∞ÊèêÂá∫ÈóÆÈ¢òÂíåËÆ§ËØÜÈóÆÈ¢òÔºåÊàë‰ª¨Â∞±Ë¶ÅÁäØÊûÅÂ§ßÁöÑÈîôËØØ„ÄÇ„ÄäÂú®‰∏≠ÂõΩÂÖ±‰∫ßÂÖöÁ¨¨‰∏ÉÂ±ä‰∏≠Â§ÆÂßîÂëò‰ºöÁ¨¨‰∫åÊ¨°ÂÖ®‰Ωì‰ºöËÆÆ‰∏äÁöÑÊä•Âëä„ÄãÔºåÔºà‰∏Ä‰πùÂõõ‰πùÂπ¥‰∏âÊúà‰∫îÊó•ÔºâÔºå„ÄäÊØõÊ≥Ω‰∏úÈÄâÈõÜ„ÄãÁ¨¨ÂõõÂç∑Á¨¨‰∏ÄÂõõ‰∫åÂÖ´È°µ„ÄÇÂú®ÊàëÂõΩÔºåËôΩÁÑ∂Á§æ‰ºö‰∏ª‰πâÊîπÈÄ†ÔºåÂú®ÊâÄÊúâÂà∂ÊñπÈù¢ËØ¥Êù•ÔºåÂ∑≤ÁªèÂü∫Êú¨ÂÆåÊàêÔºåÈù©ÂëΩÊó∂ÊúüÁöÑÂ§ßËßÑÊ®°ÁöÑÊÄ•È£éÊö¥Èõ®ÂºèÁöÑÁæ§‰ºóÈò∂Á∫ßÊñó‰∫âÂ∑≤ÁªèÂü∫Êú¨ÁªìÊùüÔºå‰ΩÜÊòØÔºåË¢´Êé®ÁøªÁöÑÂú∞‰∏ª‰π∞ÂäûÈò∂Á∫ßÁöÑÊÆã‰ΩôËøòÊòØÂ≠òÂú®ÔºåËµÑ‰∫ßÈò∂Á∫ßËøòÊòØÂ≠òÂú®ÔºåÂ∞èËµÑ‰∫ßÈò∂Á∫ßÂàöÂàöÂú®ÊîπÈÄ†„ÄÇÈò∂Á∫ßÊñó‰∫âÂπ∂Ê≤°ÊúâÁªìÊùü„ÄÇÊó†‰∫ßÈò∂Á∫ßÂíåËµÑ‰∫ßÈò∂Á∫ß‰πãÈó¥ÁöÑÈò∂Á∫ßÊñó‰∫âÔºåÂêÑÊ¥æÊîøÊ≤ªÂäõÈáè‰πãÈó¥ÁöÑÈò∂Á∫ßÊñó‰∫âÔºåÊó†‰∫ßÈò∂Á∫ßÂíåËµÑ‰∫ßÈò∂Á∫ß‰πãÈó¥Âú®ÊÑèËØÜÂΩ¢ÊÄÅÊñπÈù¢ÁöÑÈò∂Á∫ßÊñó‰∫âÔºåËøòÊòØÈïøÊúüÁöÑ„ÄÅÊõ≤ÊäòÁöÑÔºåÊúâÊó∂ÁîöËá≥ÊòØÂæàÊøÄÁÉàÁöÑ„ÄÇÊó†‰∫ßÈò∂Á∫ßË¶ÅÊåâÁÖßËá™Â∑±ÁöÑ‰∏ñÁïåËßÇÊîπÈÄ†‰∏ñÁïåÔºåËµÑ‰∫ßÈò∂Á∫ß‰πüË¶ÅÊåâÁÖßËá™Â∑±ÁöÑ‰∏ñÁïåËßÇÊîπÈÄ†‰∏ñÁïå„ÄÇÂú®Ëøô‰∏ÄÊñπÈù¢ÔºåÁ§æ‰ºö‰∏ª‰πâÂíåËµÑÊú¨‰∏ª‰πâ‰πãÈó¥Ë∞ÅËÉúË∞ÅË¥üÁöÑÈóÆÈ¢òËøòÊ≤°ÊúâÁúüÊ≠£Ëß£ÂÜ≥„ÄÇ„ÄäÂÖ≥‰∫éÊ≠£Á°ÆÂ§ÑÁêÜ‰∫∫Ê∞ëÂÜÖÈÉ®ÁüõÁõæÁöÑÈóÆÈ¢ò„ÄãÔºà‰∏Ä‰πù‰∫î‰∏ÉÂπ¥‰∫åÊúà‰∫åÂçÅ‰∏ÉÊó•ÔºâÔºå‰∫∫Ê∞ëÂá∫ÁâàÁ§æÁ¨¨‰∫åÂÖ≠ÔºçÔºç‰∫å‰∏ÉÈ°µÊïôÊù°‰∏ª‰πâÂíå‰øÆÊ≠£‰∏ª‰πâÈÉΩÊòØËøùÂèçÈ©¨ÂÖãÊÄù‰∏ª‰πâÁöÑ„ÄÇÈ©¨ÂÖãÊÄù‰∏ª‰πâ‰∏ÄÂÆöË¶ÅÂêëÂâçÂèëÂ±ïÔºåË¶ÅÈöèÁùÄÂÆûË∑µÁöÑÂèëÂ±ïËÄåÂèëÂ±ïÔºå‰∏çËÉΩÂÅúÊªû‰∏çÂâç„ÄÇÂÅúÊ≠¢‰∫ÜÔºåËÄÅÊòØÈÇ£‰πà‰∏ÄÂ•óÔºåÂÆÉÂ∞±Ê≤°ÊúâÁîüÂëΩ‰∫Ü„ÄÇ‰ΩÜÊòØÔºåÈ©¨ÂÖãÊÄù‰∏ª‰πâÁöÑÂü∫Êú¨ÊÄùÊÉ≥ÂéüÂàôÂèàÊòØ‰∏çËÉΩËøùËÉåÁöÑÔºåËøùËÉå‰∫ÜÂ∞±Ë¶ÅÁäØÈîôËØØ„ÄÇÁî®ÂΩ¢ËÄå‰∏äÂ≠¶ÁöÑËßÇÁÇπÁúãÂæÖÈ©¨ÂÖãÊÄù‰∏ª‰πâÁöÑÂü∫Êú¨ÂéüÂàôÔºåËøôÊòØÊïôÊù°‰∏ª‰πâ„ÄÇÂê¶ÂÆöÈ©¨Âàó‰∏ª‰πâÁöÑÂü∫Êú¨ÂéüÂàôÔºåÂê¶ÂÆöÈ©¨ÂÖãÊÄù‰∏ª‰πâÁöÑÊôÆÈÅçÁúüÁêÜÔºåËøôÂ∞±ÊòØ‰øÆÊ≠£‰∏ª‰πâ„ÄÇ‰øÆÊ≠£‰∏ª‰πâÊòØ‰∏ÄÁßçËµÑ‰∫ßÈò∂Á∫ßÊÄùÊÉ≥„ÄÇ‰øÆÊ≠£‰∏ª‰πâËÄÖÊäπÊùÄÁ§æ‰ºö‰∏ª‰πâÂíåËµÑÊú¨‰∏ª‰πâÁöÑÂå∫Âà´ÔºåÊäπÊùÄÊó†‰∫ßÈò∂Á∫ß‰∏ìÊîøÂíåËµÑ‰∫ßÈò∂Á∫ß‰∏ìÊîøÁöÑÂå∫Âà´„ÄÇ‰ªñ‰ª¨ÊâÄ‰∏ªÂº†ÁöÑÔºåÂú®ÂÆûÈôÖ‰∏äÂπ∂‰∏çÊòØÁ§æ‰ºö‰∏ª‰πâË∑ØÁ∫øÔºåËÄåÊòØËµÑÊú¨‰∏ª‰πâË∑ØÁ∫ø„ÄÇÂú®Áé∞Âú®ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰øÆÊ≠£‰∏ª‰πâÊòØÊØîÊïôÊù°‰∏ª‰πâÊõ¥ÊúâÂÆ≥ÁöÑ‰∏úË•ø„ÄÇÊàë‰ª¨Áé∞Âú®ÊÄùÊÉ≥Ë∑ØÁ∫ø‰∏äÁöÑ‰∏Ä‰∏™ÈáçË¶Å‰ªªÂä°ÔºåÂ∞±ÊòØË¶ÅÂ±ïÂºÄÂØπ‰øÆÊ≠£‰∏ª‰πâÁöÑÊâπÂà§„ÄÇ„ÄäÂú®‰∏≠ÂõΩÂÖ±‰∫ßÂÖöÂÖ®ÂõΩÂÆ£‰º†Â∑•‰Ωú‰ºöËÆÆ‰∏äÁöÑËÆ≤ËØù„ÄãÔºà‰∏Ä‰πù‰∫î‰∏ÉÂπ¥‰∏âÊúàÂçÅ‰∫åÊó•ÔºâÔºå‰∫∫Ê∞ëÂá∫ÁâàÁ§æÁ¨¨‰∫å‚óãÔºçÔºç‰∫å‰∏ÄÈ°µ„ÄÇ‰øÆÊ≠£‰∏ª‰πâÔºåÊàñËÄÖÂè≥ÂÄæÊú∫‰ºö‰∏ª‰πâÔºåÊòØ‰∏ÄÁßçËµÑ‰∫ßÈò∂Á∫ßÊÄùÊΩÆÔºåÂÆÉÊØîÊïôÊù°‰∏ª‰πâÊúâÊõ¥Â§ßÁöÑÂç±Èô©ÊÄß„ÄÇ‰øÆÊ≠£‰∏ª‰πâËÄÖÔºåÂè≥ÂÄæÊú∫‰ºö‰∏ª‰πâËÄÖÔºåÂè£Â§¥‰∏ä‰πüÊåÇÁùÄÈ©¨ÂÖãÊÄù‰∏ª‰πâÔºå‰ªñ‰ª¨‰πüÂú®ÈÇ£ÈáåÊîªÂáª‚ÄúÊïôÊù°‰∏ª‰πâ‚Äù„ÄÇ‰ΩÜÊòØ‰ªñ‰ª¨ÊâÄÊîªÂáªÁöÑÊ≠£ÊòØÈ©¨ÂÖãÊÄù‰∏ª‰πâÁöÑÊúÄÊ†πÊú¨ÁöÑ‰∏úË•ø„ÄÇ‰ªñ‰ª¨ÂèçÂØπÊàñËÄÖÊ≠™Êõ≤ÂîØÁâ©ËÆ∫ÂíåËæ©ËØÅÊ≥ïÔºåÂèçÂØπÊàñËÄÖ‰ºÅÂõæÂâäÂº±‰∫∫Ê∞ëÊ∞ë‰∏ª‰∏ìÊîøÂíåÂÖ±‰∫ßÂÖöÁöÑÈ¢ÜÂØºÔºåÂèçÂØπÊàñËÄÖ‰ºÅÂõæÂâäÂº±ÊòØÊîπÈÄ†ÂíåÁ§æ‰ºö‰∏ª‰πâÂª∫ËÆæ„ÄÇÂú®ÊàëÂõΩÁ§æ‰ºö‰∏ª‰πâÈù©ÂëΩÂèñÂæóÂü∫Êú¨ËÉúÂà©‰ª•ÂêéÔºåÁ§æ‰ºö‰∏äËøòÊúâ‰∏ÄÈÉ®ÂàÜ‰∫∫Ê¢¶ÊÉ≥ÊÅ¢Â§çËµÑÊú¨‰∏ª‰πâÂà∂Â∫¶Ôºå‰ªñ‰ª¨Ë¶Å‰ªéÂêÑ‰∏™ÊñπÈù¢ÂêëÂ∑•‰∫∫Èò∂Á∫ßËøõË°åÊñó‰∫âÔºåÂåÖÊã¨ÊÄùÊÉ≥ÊñπÈù¢ÁöÑÊñó‰∫â„ÄÇËÄåÂú®Ëøô‰∏™Êñó‰∫â‰∏≠Ôºå‰øÆÊ≠£‰∏ª‰πâËÄÖÂ∞±ÊòØ‰ªñ‰ª¨ÊúÄÂ•ΩÁöÑÂä©Êâã„ÄÇ„ÄäÂÖ≥‰∫éÊ≠£Á°ÆÂ§ÑÁêÜ‰∫∫Ê∞ëÂÜÖÈÉ®ÁüõÁõæÁöÑÈóÆÈ¢ò„ÄãÔºà‰∏Ä‰πù‰∫î‰∏ÉÂπ¥‰∫åÊúà‰∫åÂçÅ‰∏ÉÊó•Ôºâ‰∫∫Ê∞ëÂá∫ÁâàÁ§æÁ¨¨‰∫å‰πùÔºçÔºç‰∏â‚óãÈ°µ„ÄÇ";
}


- (uint32_t *)p_newLongChineseUnicodeCodePoints
{
    uint32_t codePoints[] = {
        0x9636, 0x7ea7, 0x6597, 0x4e89, 0xff0c, 0x4e00, 0x4e9b, 0x9636, 0x7ea7, 0x80dc, 0x5229, 0x4e86, 0xff0c,
        0x4e00, 0x4e9b, 0x9636, 0x7ea7, 0x6d88, 0x706d, 0x4e86, 0x3002, 0x8fd9, 0x5c31, 0x662f, 0x5386, 0x53f2,
        0xff0c, 0x8fd9, 0x5c31, 0x662f, 0x51e0, 0x5343, 0x5e74, 0x6765, 0x7684, 0x6587, 0x660e, 0x53f2, 0x3002,
        0x62ff, 0x8fd9, 0x4e2a, 0x89c2, 0x70b9, 0x89e3, 0x91ca, 0x5386, 0x53f2, 0x7684, 0x5c31, 0x53eb, 0x505a,
        0x5386, 0x53f2, 0x7684, 0x552f, 0x7269, 0x4e3b, 0x4e49, 0xff0c, 0x7ad9, 0x5728, 0x8fd9, 0x4e2a, 0x89c2,
        0x70b9, 0x7684, 0x53cd, 0x9762, 0x7684, 0x662f, 0x5386, 0x53f2, 0x7684, 0x552f, 0x5fc3, 0x4e3b, 0x4e49,
        0x3002, 0x300a, 0x4e22, 0x6389, 0x5e7b, 0x60f3, 0xff0c, 0x51c6, 0x5907, 0x6597, 0x4e89, 0x300b, 0xff08,
        0x4e00, 0x4e5d, 0x56db, 0x4e5d, 0x5e74, 0x516b, 0x6708, 0x5341, 0x56db, 0x65e5, 0xff09, 0xff0c, 0x300a,
        0x6bdb, 0x6cfd, 0x4e1c, 0x9009, 0x96c6, 0x300b, 0x7b2c, 0x56db, 0x5377, 0x7b2c, 0x4e00, 0x56db, 0x4e5d,
        0x4e00, 0x9875, 0x3002, 0x5730, 0x4e3b, 0x9636, 0x7ea7, 0x5bf9, 0x4e8e, 0x519c, 0x6c11, 0x7684, 0x6b8b,
        0x9177, 0x7684, 0x7ecf, 0x6d4e, 0x5265, 0x524a, 0x548c, 0x653f, 0x6cbb, 0x538b, 0x8feb, 0xff0c, 0x8feb,
        0x4f7f, 0x519c, 0x6c11, 0x591a, 0x6b21, 0x5730, 0x4e3e, 0x884c, 0x8d77, 0x4e49, 0xff0c, 0x4ee5, 0x53cd,
        0x6297, 0x5730, 0x4e3b, 0x9636, 0x7ea7, 0x7684, 0x7edf, 0x6cbb, 0x3002, 0x2026, 0x2026, 0x5728, 0x4e2d,
        0x56fd, 0x5c01, 0x5efa, 0x793e, 0x4f1a, 0x91cc, 0xff0c, 0x53ea, 0x6709, 0x8fd9, 0x4e9b, 0x519c, 0x6c11,
        0x7684, 0x9636, 0x7ea7, 0x6597, 0x4e89, 0x3001, 0x519c, 0x6c11, 0x7684, 0x8d77, 0x4e49, 0x548c, 0x519c,
        0x6c11, 0x7684, 0x6218, 0x4e89, 0xff0c, 0x624d, 0x662f, 0x5386, 0x53f2, 0x53d1, 0x5c55, 0x7684, 0x771f,
        0x6b63, 0x52a8, 0x529b, 0x3002, 0x300a, 0x4e2d, 0x56fd, 0x9769, 0x547d, 0x548c, 0x4e2d, 0x56fd, 0x5171,
        0x4ea7, 0x515a, 0x300b, 0xff08, 0x4e00, 0x4e5d, 0x4e09, 0x4e5d, 0x5e74, 0x5341, 0x4e8c, 0x6708, 0xff09,
        0x3002, 0x4eba, 0x6c11, 0x9760, 0x6211, 0x4eec, 0x53bb, 0x7ec4, 0x7ec7, 0xff0c, 0x4e2d, 0x56fd, 0x7684,
        0x53cd, 0x52a8, 0x5206, 0x5b50, 0xff0c, 0x9760, 0x6211, 0x4eec, 0x7ec4, 0x7ec7, 0x8d77, 0x4eba, 0x6c11,
        0x53bb, 0x628a, 0x4ed6, 0x6253, 0x5012, 0x3002, 0x51e1, 0x662f, 0x53cd, 0x52a8, 0x7684, 0x4e1c, 0x897f,
        0xff0c, 0x4f60, 0x4e0d, 0x6253, 0xff0c, 0x4ed6, 0x5c31, 0x4e0d, 0x5012, 0x3002, 0x8fd9, 0x4e5f, 0x548c,
        0x626b, 0x5730, 0x4e00, 0x6837, 0xff0c, 0x626b, 0x5e1a, 0x4e0d, 0x5230, 0xff0c, 0x7070, 0x5c18, 0x7167,
        0x4f8b, 0x4e0d, 0x4f1a, 0x81ea, 0x5df1, 0x8dd1, 0x6389, 0x3002, 0x300a, 0x6297, 0x65e5, 0x6218, 0x4e89,
        0x80dc, 0x5229, 0x540e, 0x7684, 0x65f6, 0x5c40, 0x548c, 0x6211, 0x4eec, 0x7684, 0x65b9, 0x9488, 0x300b,
        0xff08, 0x4e00, 0x4e5d, 0x56db, 0x4e94, 0x5e74, 0x516b, 0x6708, 0x5341, 0x4e09, 0x65e5, 0xff09, 0x300a,
        0x6bdb, 0x6cfd, 0x4e1c, 0x9009, 0x96c6, 0x300b, 0x7b2c, 0x56db, 0x5377, 0x4e00, 0x4e00, 0x4e09, 0x4e00,
        0x9875, 0x3002, 0x9769, 0x547d, 0x4e0d, 0x662f, 0x8bf7, 0x5ba2, 0x5403, 0x996d, 0xff0c, 0x4e0d, 0x662f,
        0x505a, 0x6587, 0x7ae0, 0xff0c, 0x4e0d, 0x662f, 0x7ed8, 0x753b, 0x7ee3, 0x82b1, 0xff0c, 0x4e0d, 0x80fd,
        0x90a3, 0x6837, 0x96c5, 0x81f4, 0xff0c, 0x90a3, 0x6837, 0x4ece, 0x5bb9, 0x4e0d, 0x8feb, 0xff0c, 0x6587,
        0x8d28, 0x5f6c, 0x5f6c, 0xff0c, 0x90a3, 0x6837, 0x6e29, 0x826f, 0x606d, 0x4fed, 0x8ba9, 0x3002, 0x9769,
        0x547d, 0x662f, 0x66b4, 0x52a8, 0xff0c, 0x662f, 0x4e00, 0x4e2a, 0x9636, 0x7ea7, 0x63a8, 0x7ffb, 0x53e6,
        0x4e00, 0x4e2a, 0x9636, 0x7ea7, 0x7684, 0x66b4, 0x70c8, 0x7684, 0x884c, 0x52a8, 0x3002, 0x300a, 0x6e56,
        0x5357, 0x519c, 0x6c11, 0x8fd0, 0x52a8, 0x8003, 0x5bdf, 0x62a5, 0x544a, 0x300b, 0xff08, 0x4e00, 0x4e5d,
        0x4e8c, 0x4e03, 0x5e74, 0x4e09, 0x6708, 0xff09, 0x3002, 0x4ec0, 0x4e48, 0x4eba, 0x7ad9, 0x5728, 0x9769,
        0x547d, 0x4eba, 0x6c11, 0x65b9, 0x9762, 0xff0c, 0x4ed6, 0x5c31, 0x662f, 0x9769, 0x547d, 0x6d3e, 0xff0c,
        0x4ec0, 0x4e48, 0x4eba, 0x7ad9, 0x5728, 0x5e1d, 0x56fd, 0x4e3b, 0x4e49, 0x5c01, 0x5efa, 0x4e3b, 0x4e49,
        0x5b98, 0x50da, 0x8d44, 0x672c, 0x4e3b, 0x4e49, 0x65b9, 0x9762, 0xff0c, 0x4ed6, 0x5c31, 0x662f, 0x53cd,
        0x9769, 0x547d, 0x6d3e, 0x3002, 0x4ec0, 0x4e48, 0x4eba, 0x53ea, 0x662f, 0x53e3, 0x5934, 0x4e0a, 0x7ad9,
        0x5728, 0x9769, 0x547d, 0x4eba, 0x6c11, 0x65b9, 0x9762, 0x800c, 0x5728, 0x884c, 0x52a8, 0x4e0a, 0x5219,
        0x53e6, 0x662f, 0x4e00, 0x6837, 0xff0c, 0x4ed6, 0x5c31, 0x662f, 0x4e00, 0x4e2a, 0x53e3, 0x5934, 0x9769,
        0x547d, 0x6d3e, 0xff0c, 0x5982, 0x679c, 0x4e0d, 0x4f46, 0x5728, 0x53e3, 0x5934, 0x4e0a, 0x800c, 0x4e14,
        0x5728, 0x884c, 0x52a8, 0x4e0a, 0x4e5f, 0x7ad9, 0x5728, 0x9769, 0x547d, 0x4eba, 0x6c11, 0x65b9, 0x9762,
        0xff0c, 0x4ed6, 0x5c31, 0x662f, 0x4e00, 0x4e2a, 0x5b8c, 0x5168, 0x7684, 0x9769, 0x547d, 0x6d3e, 0x3002,
        0xff0d, 0xff0d, 0x5728, 0x4e2d, 0x56fd, 0x4eba, 0x6c11, 0x653f, 0x6cbb, 0x534f, 0x5546, 0x4f1a, 0x8bae,
        0x7b2c, 0x4e00, 0x5c4a, 0x5168, 0x56fd, 0x59d4, 0x5458, 0x4f1a, 0x7b2c, 0x4e8c, 0x6b21, 0x4f1a, 0x8bae,
        0x4e0a, 0x7684, 0x95ed, 0x5e55, 0x8bcd, 0x3002, 0xff08, 0x4e00, 0x4e5d, 0x4e94, 0x25cb, 0x5e74, 0x516d,
        0x6708, 0x4e8c, 0x5341, 0x4e09, 0x65e5, 0xff09, 0xff0c, 0x4e00, 0x4e5d, 0x4e94, 0x25cb, 0x5e74, 0x516d,
        0x6708, 0x4e8c, 0x5341, 0x56db, 0x65e5, 0x300a, 0x4eba, 0x6c11, 0x65e5, 0x62a5, 0x300b, 0x3002, 0x5982,
        0x82e5, 0x4e0d, 0x88ab, 0x654c, 0x4eba, 0x53cd, 0x5bf9, 0xff0c, 0x90a3, 0x5c31, 0x4e0d, 0x597d, 0x4e86,
        0xff0c, 0x90a3, 0x4e00, 0x5b9a, 0x662f, 0x540c, 0x654c, 0x4eba, 0x540c, 0x6d41, 0x5408, 0x6c61, 0x4e86,
        0x3002, 0x5982, 0x82e5, 0x88ab, 0x654c, 0x4eba, 0x53cd, 0x5bf9, 0xff0c, 0x90a3, 0x5c31, 0x597d, 0x4e86,
        0xff0c, 0x90a3, 0x5c31, 0x8bc1, 0x660e, 0x6211, 0x4eec, 0x540c, 0x654c, 0x4eba, 0x5212, 0x6e05, 0x754c,
        0x7ebf, 0x4e86, 0x3002, 0x300a, 0x88ab, 0x654c, 0x4eba, 0x53cd, 0x5bf9, 0x662f, 0x597d, 0x4e8b, 0x800c,
        0x4e0d, 0x662f, 0x574f, 0x4e8b, 0x300b, 0xff0c, 0x4e00, 0x4e5d, 0x4e09, 0x4e5d, 0x5e74, 0x4e94, 0x6708,
        0x4e8c, 0x5341, 0x516d, 0x65e5, 0x3002, 0x5728, 0x62ff, 0x67aa, 0x7684, 0x654c, 0x4eba, 0x88ab, 0x6d88,
        0x706d, 0x4ee5, 0x540e, 0xff0c, 0x4e0d, 0x62ff, 0x67aa, 0x7684, 0x654c, 0x4eba, 0x4f9d, 0x7136, 0x5b58,
        0x5728, 0xff0c, 0x4ed6, 0x4eec, 0x5fc5, 0x7136, 0x5730, 0x8981, 0x548c, 0x6211, 0x4eec, 0x4f5c, 0x62da,
        0x6b7b, 0x7684, 0x6597, 0x4e89, 0xff0c, 0x6211, 0x4eec, 0x51b3, 0x4e0d, 0x53ef, 0x4ee5, 0x8f7b, 0x89c6,
        0x8fd9, 0x4e9b, 0x654c, 0x4eba, 0x3002, 0x5982, 0x679c, 0x6211, 0x4eec, 0x73b0, 0x5728, 0x4e0d, 0x662f,
        0x8fd9, 0x6837, 0x5730, 0x63d0, 0x51fa, 0x95ee, 0x9898, 0x548c, 0x8ba4, 0x8bc6, 0x95ee, 0x9898, 0xff0c,
        0x6211, 0x4eec, 0x5c31, 0x8981, 0x72af, 0x6781, 0x5927, 0x7684, 0x9519, 0x8bef, 0x3002, 0x300a, 0x5728,
        0x4e2d, 0x56fd, 0x5171, 0x4ea7, 0x515a, 0x7b2c, 0x4e03, 0x5c4a, 0x4e2d, 0x592e, 0x59d4, 0x5458, 0x4f1a,
        0x7b2c, 0x4e8c, 0x6b21, 0x5168, 0x4f53, 0x4f1a, 0x8bae, 0x4e0a, 0x7684, 0x62a5, 0x544a, 0x300b, 0xff0c,
        0xff08, 0x4e00, 0x4e5d, 0x56db, 0x4e5d, 0x5e74, 0x4e09, 0x6708, 0x4e94, 0x65e5, 0xff09, 0xff0c, 0x300a,
        0x6bdb, 0x6cfd, 0x4e1c, 0x9009, 0x96c6, 0x300b, 0x7b2c, 0x56db, 0x5377, 0x7b2c, 0x4e00, 0x56db, 0x4e8c,
        0x516b, 0x9875, 0x3002, 0x5728, 0x6211, 0x56fd, 0xff0c, 0x867d, 0x7136, 0x793e, 0x4f1a, 0x4e3b, 0x4e49,
        0x6539, 0x9020, 0xff0c, 0x5728, 0x6240, 0x6709, 0x5236, 0x65b9, 0x9762, 0x8bf4, 0x6765, 0xff0c, 0x5df2,
        0x7ecf, 0x57fa, 0x672c, 0x5b8c, 0x6210, 0xff0c, 0x9769, 0x547d, 0x65f6, 0x671f, 0x7684, 0x5927, 0x89c4,
        0x6a21, 0x7684, 0x6025, 0x98ce, 0x66b4, 0x96e8, 0x5f0f, 0x7684, 0x7fa4, 0x4f17, 0x9636, 0x7ea7, 0x6597,
        0x4e89, 0x5df2, 0x7ecf, 0x57fa, 0x672c, 0x7ed3, 0x675f, 0xff0c, 0x4f46, 0x662f, 0xff0c, 0x88ab, 0x63a8,
        0x7ffb, 0x7684, 0x5730, 0x4e3b, 0x4e70, 0x529e, 0x9636, 0x7ea7, 0x7684, 0x6b8b, 0x4f59, 0x8fd8, 0x662f,
        0x5b58, 0x5728, 0xff0c, 0x8d44, 0x4ea7, 0x9636, 0x7ea7, 0x8fd8, 0x662f, 0x5b58, 0x5728, 0xff0c, 0x5c0f,
        0x8d44, 0x4ea7, 0x9636, 0x7ea7, 0x521a, 0x521a, 0x5728, 0x6539, 0x9020, 0x3002, 0x9636, 0x7ea7, 0x6597,
        0x4e89, 0x5e76, 0x6ca1, 0x6709, 0x7ed3, 0x675f, 0x3002, 0x65e0, 0x4ea7, 0x9636, 0x7ea7, 0x548c, 0x8d44,
        0x4ea7, 0x9636, 0x7ea7, 0x4e4b, 0x95f4, 0x7684, 0x9636, 0x7ea7, 0x6597, 0x4e89, 0xff0c, 0x5404, 0x6d3e,
        0x653f, 0x6cbb, 0x529b, 0x91cf, 0x4e4b, 0x95f4, 0x7684, 0x9636, 0x7ea7, 0x6597, 0x4e89, 0xff0c, 0x65e0,
        0x4ea7, 0x9636, 0x7ea7, 0x548c, 0x8d44, 0x4ea7, 0x9636, 0x7ea7, 0x4e4b, 0x95f4, 0x5728, 0x610f, 0x8bc6,
        0x5f62, 0x6001, 0x65b9, 0x9762, 0x7684, 0x9636, 0x7ea7, 0x6597, 0x4e89, 0xff0c, 0x8fd8, 0x662f, 0x957f,
        0x671f, 0x7684, 0x3001, 0x66f2, 0x6298, 0x7684, 0xff0c, 0x6709, 0x65f6, 0x751a, 0x81f3, 0x662f, 0x5f88,
        0x6fc0, 0x70c8, 0x7684, 0x3002, 0x65e0, 0x4ea7, 0x9636, 0x7ea7, 0x8981, 0x6309, 0x7167, 0x81ea, 0x5df1,
        0x7684, 0x4e16, 0x754c, 0x89c2, 0x6539, 0x9020, 0x4e16, 0x754c, 0xff0c, 0x8d44, 0x4ea7, 0x9636, 0x7ea7,
        0x4e5f, 0x8981, 0x6309, 0x7167, 0x81ea, 0x5df1, 0x7684, 0x4e16, 0x754c, 0x89c2, 0x6539, 0x9020, 0x4e16,
        0x754c, 0x3002, 0x5728, 0x8fd9, 0x4e00, 0x65b9, 0x9762, 0xff0c, 0x793e, 0x4f1a, 0x4e3b, 0x4e49, 0x548c,
        0x8d44, 0x672c, 0x4e3b, 0x4e49, 0x4e4b, 0x95f4, 0x8c01, 0x80dc, 0x8c01, 0x8d1f, 0x7684, 0x95ee, 0x9898,
        0x8fd8, 0x6ca1, 0x6709, 0x771f, 0x6b63, 0x89e3, 0x51b3, 0x3002, 0x300a, 0x5173, 0x4e8e, 0x6b63, 0x786e,
        0x5904, 0x7406, 0x4eba, 0x6c11, 0x5185, 0x90e8, 0x77db, 0x76fe, 0x7684, 0x95ee, 0x9898, 0x300b, 0xff08,
        0x4e00, 0x4e5d, 0x4e94, 0x4e03, 0x5e74, 0x4e8c, 0x6708, 0x4e8c, 0x5341, 0x4e03, 0x65e5, 0xff09, 0xff0c,
        0x4eba, 0x6c11, 0x51fa, 0x7248, 0x793e, 0x7b2c, 0x4e8c, 0x516d, 0xff0d, 0xff0d, 0x4e8c, 0x4e03, 0x9875,
        0x6559, 0x6761, 0x4e3b, 0x4e49, 0x548c, 0x4fee, 0x6b63, 0x4e3b, 0x4e49, 0x90fd, 0x662f, 0x8fdd, 0x53cd,
        0x9a6c, 0x514b, 0x601d, 0x4e3b, 0x4e49, 0x7684, 0x3002, 0x9a6c, 0x514b, 0x601d, 0x4e3b, 0x4e49, 0x4e00,
        0x5b9a, 0x8981, 0x5411, 0x524d, 0x53d1, 0x5c55, 0xff0c, 0x8981, 0x968f, 0x7740, 0x5b9e, 0x8df5, 0x7684,
        0x53d1, 0x5c55, 0x800c, 0x53d1, 0x5c55, 0xff0c, 0x4e0d, 0x80fd, 0x505c, 0x6ede, 0x4e0d, 0x524d, 0x3002,
        0x505c, 0x6b62, 0x4e86, 0xff0c, 0x8001, 0x662f, 0x90a3, 0x4e48, 0x4e00, 0x5957, 0xff0c, 0x5b83, 0x5c31,
        0x6ca1, 0x6709, 0x751f, 0x547d, 0x4e86, 0x3002, 0x4f46, 0x662f, 0xff0c, 0x9a6c, 0x514b, 0x601d, 0x4e3b,
        0x4e49, 0x7684, 0x57fa, 0x672c, 0x601d, 0x60f3, 0x539f, 0x5219, 0x53c8, 0x662f, 0x4e0d, 0x80fd, 0x8fdd,
        0x80cc, 0x7684, 0xff0c, 0x8fdd, 0x80cc, 0x4e86, 0x5c31, 0x8981, 0x72af, 0x9519, 0x8bef, 0x3002, 0x7528,
        0x5f62, 0x800c, 0x4e0a, 0x5b66, 0x7684, 0x89c2, 0x70b9, 0x770b, 0x5f85, 0x9a6c, 0x514b, 0x601d, 0x4e3b,
        0x4e49, 0x7684, 0x57fa, 0x672c, 0x539f, 0x5219, 0xff0c, 0x8fd9, 0x662f, 0x6559, 0x6761, 0x4e3b, 0x4e49,
        0x3002, 0x5426, 0x5b9a, 0x9a6c, 0x5217, 0x4e3b, 0x4e49, 0x7684, 0x57fa, 0x672c, 0x539f, 0x5219, 0xff0c,
        0x5426, 0x5b9a, 0x9a6c, 0x514b, 0x601d, 0x4e3b, 0x4e49, 0x7684, 0x666e, 0x904d, 0x771f, 0x7406, 0xff0c,
        0x8fd9, 0x5c31, 0x662f, 0x4fee, 0x6b63, 0x4e3b, 0x4e49, 0x3002, 0x4fee, 0x6b63, 0x4e3b, 0x4e49, 0x662f,
        0x4e00, 0x79cd, 0x8d44, 0x4ea7, 0x9636, 0x7ea7, 0x601d, 0x60f3, 0x3002, 0x4fee, 0x6b63, 0x4e3b, 0x4e49,
        0x8005, 0x62b9, 0x6740, 0x793e, 0x4f1a, 0x4e3b, 0x4e49, 0x548c, 0x8d44, 0x672c, 0x4e3b, 0x4e49, 0x7684,
        0x533a, 0x522b, 0xff0c, 0x62b9, 0x6740, 0x65e0, 0x4ea7, 0x9636, 0x7ea7, 0x4e13, 0x653f, 0x548c, 0x8d44,
        0x4ea7, 0x9636, 0x7ea7, 0x4e13, 0x653f, 0x7684, 0x533a, 0x522b, 0x3002, 0x4ed6, 0x4eec, 0x6240, 0x4e3b,
        0x5f20, 0x7684, 0xff0c, 0x5728, 0x5b9e, 0x9645, 0x4e0a, 0x5e76, 0x4e0d, 0x662f, 0x793e, 0x4f1a, 0x4e3b,
        0x4e49, 0x8def, 0x7ebf, 0xff0c, 0x800c, 0x662f, 0x8d44, 0x672c, 0x4e3b, 0x4e49, 0x8def, 0x7ebf, 0x3002,
        0x5728, 0x73b0, 0x5728, 0x7684, 0x60c5, 0x51b5, 0x4e0b, 0xff0c, 0x4fee, 0x6b63, 0x4e3b, 0x4e49, 0x662f,
        0x6bd4, 0x6559, 0x6761, 0x4e3b, 0x4e49, 0x66f4, 0x6709, 0x5bb3, 0x7684, 0x4e1c, 0x897f, 0x3002, 0x6211,
        0x4eec, 0x73b0, 0x5728, 0x601d, 0x60f3, 0x8def, 0x7ebf, 0x4e0a, 0x7684, 0x4e00, 0x4e2a, 0x91cd, 0x8981,
        0x4efb, 0x52a1, 0xff0c, 0x5c31, 0x662f, 0x8981, 0x5c55, 0x5f00, 0x5bf9, 0x4fee, 0x6b63, 0x4e3b, 0x4e49,
        0x7684, 0x6279, 0x5224, 0x3002, 0x300a, 0x5728, 0x4e2d, 0x56fd, 0x5171, 0x4ea7, 0x515a, 0x5168, 0x56fd,
        0x5ba3, 0x4f20, 0x5de5, 0x4f5c, 0x4f1a, 0x8bae, 0x4e0a, 0x7684, 0x8bb2, 0x8bdd, 0x300b, 0xff08, 0x4e00,
        0x4e5d, 0x4e94, 0x4e03, 0x5e74, 0x4e09, 0x6708, 0x5341, 0x4e8c, 0x65e5, 0xff09, 0xff0c, 0x4eba, 0x6c11,
        0x51fa, 0x7248, 0x793e, 0x7b2c, 0x4e8c, 0x25cb, 0xff0d, 0xff0d, 0x4e8c, 0x4e00, 0x9875, 0x3002, 0x4fee,
        0x6b63, 0x4e3b, 0x4e49, 0xff0c, 0x6216, 0x8005, 0x53f3, 0x503e, 0x673a, 0x4f1a, 0x4e3b, 0x4e49, 0xff0c,
        0x662f, 0x4e00, 0x79cd, 0x8d44, 0x4ea7, 0x9636, 0x7ea7, 0x601d, 0x6f6e, 0xff0c, 0x5b83, 0x6bd4, 0x6559,
        0x6761, 0x4e3b, 0x4e49, 0x6709, 0x66f4, 0x5927, 0x7684, 0x5371, 0x9669, 0x6027, 0x3002, 0x4fee, 0x6b63,
        0x4e3b, 0x4e49, 0x8005, 0xff0c, 0x53f3, 0x503e, 0x673a, 0x4f1a, 0x4e3b, 0x4e49, 0x8005, 0xff0c, 0x53e3,
        0x5934, 0x4e0a, 0x4e5f, 0x6302, 0x7740, 0x9a6c, 0x514b, 0x601d, 0x4e3b, 0x4e49, 0xff0c, 0x4ed6, 0x4eec,
        0x4e5f, 0x5728, 0x90a3, 0x91cc, 0x653b, 0x51fb, 0x201c, 0x6559, 0x6761, 0x4e3b, 0x4e49, 0x201d, 0x3002,
        0x4f46, 0x662f, 0x4ed6, 0x4eec, 0x6240, 0x653b, 0x51fb, 0x7684, 0x6b63, 0x662f, 0x9a6c, 0x514b, 0x601d,
        0x4e3b, 0x4e49, 0x7684, 0x6700, 0x6839, 0x672c, 0x7684, 0x4e1c, 0x897f, 0x3002, 0x4ed6, 0x4eec, 0x53cd,
        0x5bf9, 0x6216, 0x8005, 0x6b6a, 0x66f2, 0x552f, 0x7269, 0x8bba, 0x548c, 0x8fa9, 0x8bc1, 0x6cd5, 0xff0c,
        0x53cd, 0x5bf9, 0x6216, 0x8005, 0x4f01, 0x56fe, 0x524a, 0x5f31, 0x4eba, 0x6c11, 0x6c11, 0x4e3b, 0x4e13,
        0x653f, 0x548c, 0x5171, 0x4ea7, 0x515a, 0x7684, 0x9886, 0x5bfc, 0xff0c, 0x53cd, 0x5bf9, 0x6216, 0x8005,
        0x4f01, 0x56fe, 0x524a, 0x5f31, 0x662f, 0x6539, 0x9020, 0x548c, 0x793e, 0x4f1a, 0x4e3b, 0x4e49, 0x5efa,
        0x8bbe, 0x3002, 0x5728, 0x6211, 0x56fd, 0x793e, 0x4f1a, 0x4e3b, 0x4e49, 0x9769, 0x547d, 0x53d6, 0x5f97,
        0x57fa, 0x672c, 0x80dc, 0x5229, 0x4ee5, 0x540e, 0xff0c, 0x793e, 0x4f1a, 0x4e0a, 0x8fd8, 0x6709, 0x4e00,
        0x90e8, 0x5206, 0x4eba, 0x68a6, 0x60f3, 0x6062, 0x590d, 0x8d44, 0x672c, 0x4e3b, 0x4e49, 0x5236, 0x5ea6,
        0xff0c, 0x4ed6, 0x4eec, 0x8981, 0x4ece, 0x5404, 0x4e2a, 0x65b9, 0x9762, 0x5411, 0x5de5, 0x4eba, 0x9636,
        0x7ea7, 0x8fdb, 0x884c, 0x6597, 0x4e89, 0xff0c, 0x5305, 0x62ec, 0x601d, 0x60f3, 0x65b9, 0x9762, 0x7684,
        0x6597, 0x4e89, 0x3002, 0x800c, 0x5728, 0x8fd9, 0x4e2a, 0x6597, 0x4e89, 0x4e2d, 0xff0c, 0x4fee, 0x6b63,
        0x4e3b, 0x4e49, 0x8005, 0x5c31, 0x662f, 0x4ed6, 0x4eec, 0x6700, 0x597d, 0x7684, 0x52a9, 0x624b, 0x3002,
        0x300a, 0x5173, 0x4e8e, 0x6b63, 0x786e, 0x5904, 0x7406, 0x4eba, 0x6c11, 0x5185, 0x90e8, 0x77db, 0x76fe,
        0x7684, 0x95ee, 0x9898, 0x300b, 0xff08, 0x4e00, 0x4e5d, 0x4e94, 0x4e03, 0x5e74, 0x4e8c, 0x6708, 0x4e8c,
        0x5341, 0x4e03, 0x65e5, 0xff09, 0x4eba, 0x6c11, 0x51fa, 0x7248, 0x793e, 0x7b2c, 0x4e8c, 0x4e5d, 0xff0d,
        0xff0d, 0x4e09, 0x25cb, 0x9875, 0x3002};

    size_t count = sizeof(codePoints) / sizeof(uint32_t);
    uint32_t *new = calloc(count, sizeof(uint32_t));
    memcpy(new, codePoints, sizeof(codePoints));

    return new;
}


@end
