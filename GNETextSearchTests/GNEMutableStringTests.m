//
//  GNEMutableStringTests.m
//  GNETextSearch
//
//  Created by Anthony Drendel on 11/11/15.
//  Copyright Â© 2015 Gone East LLC. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "stringbuf.h"


// ------------------------------------------------------------------------------------------


typedef struct tsearch_stringbuf
{
    char *buffer;
    size_t capacity;
    size_t length;
} tsearch_stringbuf;

size_t _tsearch_stringbuf_get_max_char_count(tsearch_stringbuf_ptr ptr);


// ------------------------------------------------------------------------------------------


@interface GNEMutableStringTests : XCTestCase
{
    tsearch_stringbuf_ptr _mutableStringPtr;
}

@end


// ------------------------------------------------------------------------------------------


@implementation GNEMutableStringTests


// ------------------------------------------------------------------------------------------
#pragma mark - Set Up / Tear Down
// ------------------------------------------------------------------------------------------
- (void)setUp
{
    [super setUp];
    _mutableStringPtr = tsearch_stringbuf_init();
}


- (void)tearDown
{
    tsearch_stringbuf_free(_mutableStringPtr);
    [super tearDown];
}


// ------------------------------------------------------------------------------------------
#pragma mark - Initialization
// ------------------------------------------------------------------------------------------
- (void)testInitialization_Default_NotNilAndHasDefaultValues
{
    XCTAssertTrue(_mutableStringPtr != NULL);
    XCTAssertTrue(_mutableStringPtr->buffer != NULL);
    XCTAssertEqual(_mutableStringPtr->capacity, 5 * sizeof(char));
    XCTAssertEqual(_mutableStringPtr->length, 0);
}


- (void)testInitialization_WithCStringABCD_NotNilAndContainsString
{
    tsearch_stringbuf_free(_mutableStringPtr);
    _mutableStringPtr = NULL;

    const char *cString = "ABCD";
    size_t length = 4;
    _mutableStringPtr = tsearch_stringbuf_init_with_cstring(cString, length);
    XCTAssertTrue(_mutableStringPtr != NULL);
    XCTAssertTrue(_mutableStringPtr->buffer != NULL);
    [self assertCString:cString isEqualToCString:_mutableStringPtr->buffer length:length];
    XCTAssertEqual(_mutableStringPtr->capacity, 5 * sizeof(char)); // Size should not have changed.
    XCTAssertEqual(_mutableStringPtr->length, length);
}


- (void)testInitialization_WithCStringABCDE_NotNilAndContainsString
{
    tsearch_stringbuf_free(_mutableStringPtr);
    _mutableStringPtr = NULL;

    const char *cString = "ABCDE";
    size_t length = 5;
    _mutableStringPtr = tsearch_stringbuf_init_with_cstring(cString, length);
    XCTAssertTrue(_mutableStringPtr != NULL);
    XCTAssertTrue(_mutableStringPtr->buffer != NULL);
    [self assertCString:cString isEqualToCString:_mutableStringPtr->buffer length:length];
    XCTAssertEqual(_mutableStringPtr->capacity, 10 * sizeof(char)); // Size should have doubled.
    XCTAssertEqual(_mutableStringPtr->length, length);
}


- (void)testInitialization_WithCStringABCDEFGHIJK_NotNilAndContainsString
{
    tsearch_stringbuf_free(_mutableStringPtr);
    _mutableStringPtr = NULL;

    const char *cString = "ABCDEFGHIJK";
    size_t length = 11;
    _mutableStringPtr = tsearch_stringbuf_init_with_cstring(cString, length);
    XCTAssertTrue(_mutableStringPtr != NULL);
    XCTAssertTrue(_mutableStringPtr->buffer != NULL);
    [self assertCString:cString isEqualToCString:_mutableStringPtr->buffer length:length];
    XCTAssertEqual(_mutableStringPtr->capacity, 11 * sizeof(char)); // Size should switched to new size.
    XCTAssertEqual(_mutableStringPtr->length, length);
}


- (void)testInitialization_WithLongChineseCString_NotNilAndContainsString
{
    tsearch_stringbuf_free(_mutableStringPtr);
    _mutableStringPtr = NULL;

    const char *cString = [self longChineseString].UTF8String;
    size_t length = [[self longChineseString] lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    _mutableStringPtr = tsearch_stringbuf_init_with_cstring(cString, length);
    XCTAssertTrue(_mutableStringPtr != NULL);
    XCTAssertTrue(_mutableStringPtr->buffer != NULL);
    [self assertCString:cString isEqualToCString:_mutableStringPtr->buffer length:length];
    XCTAssertEqual(_mutableStringPtr->capacity, length * sizeof(char)); // Size should switched to new size.
    XCTAssertEqual(_mutableStringPtr->length, length);
}


// ------------------------------------------------------------------------------------------
#pragma mark - Length
// ------------------------------------------------------------------------------------------
- (void)testLength_EmptyCString_0
{
    XCTAssertEqual(0, _mutableStringPtr->length);
    XCTAssertEqual(0, tsearch_stringbuf_get_len(_mutableStringPtr));
}


- (void)testLength_ABCD_4
{
    const char *cString = "ABCD";
    size_t length = 4;
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);
    XCTAssertEqual(length, _mutableStringPtr->length);
    XCTAssertEqual(length, tsearch_stringbuf_get_len(_mutableStringPtr));
}


- (void)testLength_ABCDE_5
{
    const char *cString = "ABCDE";
    size_t length = 5;
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);
    XCTAssertEqual(length, _mutableStringPtr->length);
    XCTAssertEqual(length, tsearch_stringbuf_get_len(_mutableStringPtr));
}


- (void)testLength_LongChineseString_5397
{
    const char *cString = [self longChineseString].UTF8String;
    size_t length = [[self longChineseString] lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);
    XCTAssertEqual(length, _mutableStringPtr->length);
    XCTAssertEqual(length, tsearch_stringbuf_get_len(_mutableStringPtr));
}


// ------------------------------------------------------------------------------------------
#pragma mark - Get Char
// ------------------------------------------------------------------------------------------
- (void)testGetChar_EachCharInABCDE_CorrectCharAtCorrectIndex
{
    const char *cString = "ABCDE";
    size_t length = 5;
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);

    for (size_t i = 0; i < length; i++)
    {
        XCTAssertEqual(cString[i], tsearch_stringbuf_get_char_at_idx(_mutableStringPtr, i));
    }
}


- (void)testGetChar_EachCharInChineseString_CorrectCharAtCorrectIndex
{
    const char *cString = [self longChineseString].UTF8String;
    size_t length = [[self longChineseString] lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);

    for (size_t i = 0; i < length; i++)
    {
        XCTAssertEqual(cString[i], tsearch_stringbuf_get_char_at_idx(_mutableStringPtr, i));
    }
}


- (void)testGetChar_NullPointer_NullChar
{
    XCTAssertEqual('\0', tsearch_stringbuf_get_char_at_idx(NULL, 1));
}


- (void)testGetChar_PastIndex_NullChar
{
    const char *cString = "ABCDE";
    size_t length = 5;
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);

    XCTAssertEqual('\0', tsearch_stringbuf_get_char_at_idx(_mutableStringPtr, length));
}


// ------------------------------------------------------------------------------------------
#pragma mark - Appending
// ------------------------------------------------------------------------------------------
- (void)testAppending_FiveOneCharStrings_CorrectLengthAndContents
{
    XCTAssertEqual(0, _mutableStringPtr->length);
    XCTAssertEqual(5, _mutableStringPtr->capacity);
    XCTAssertEqual(5, _tsearch_stringbuf_get_max_char_count(_mutableStringPtr));

    const char *cString = "ABCDE";
    size_t length = 5;
    for (size_t i = 0; i < length; i++)
    {
        tsearch_stringbuf_append_cstring(_mutableStringPtr, (cString + i), 1);
    }

    XCTAssertEqual(length, _mutableStringPtr->length);
    XCTAssertEqual(length, tsearch_stringbuf_get_len(_mutableStringPtr));
    XCTAssertEqual(10, _mutableStringPtr->capacity);
    XCTAssertEqual(10, _tsearch_stringbuf_get_max_char_count(_mutableStringPtr));
    XCTAssertEqual(0, memcmp(cString, _mutableStringPtr->buffer, length));
    [self assertCString:cString isEqualToCString:tsearch_stringbuf_copy_cstring(_mutableStringPtr) length:length];
}


- (void)testAppending_FiveOneLongChineseStrings_CorrectLengthAndContents
{
    XCTAssertEqual(0, _mutableStringPtr->length);
    XCTAssertEqual(5, _mutableStringPtr->capacity);
    XCTAssertEqual(5, _tsearch_stringbuf_get_max_char_count(_mutableStringPtr));

    size_t count = 5;

    NSMutableString *targetString = [NSMutableString string];
    for (size_t i = 0; i < count; i++)
    {
        NSString *string = [NSString stringWithFormat:@"%@\n", [self longChineseString]];
        size_t length = [string lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
        tsearch_stringbuf_append_cstring(_mutableStringPtr, string.UTF8String, length);
        [targetString appendString:string];
    }

    size_t length = [targetString lengthOfBytesUsingEncoding:NSUTF8StringEncoding];

    XCTAssertEqual(length, _mutableStringPtr->length);
    XCTAssertEqual(length, tsearch_stringbuf_get_len(_mutableStringPtr));
    XCTAssertEqual(43184, _mutableStringPtr->capacity);
    XCTAssertEqual(43184, _tsearch_stringbuf_get_max_char_count(_mutableStringPtr));
    XCTAssertEqual(0, memcmp(targetString.UTF8String, _mutableStringPtr->buffer, length));
    [self assertCString:targetString.UTF8String isEqualToCString:tsearch_stringbuf_copy_cstring(_mutableStringPtr) length:length];
}


// ------------------------------------------------------------------------------------------
#pragma mark - Copy Contents
// ------------------------------------------------------------------------------------------
- (void)testCopyContents_ABCDE_PerfectCopy
{
    const char *cString = "ABCDE";
    size_t length = 5;
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);

    const char *copy = tsearch_stringbuf_copy_cstring(_mutableStringPtr);
    XCTAssertEqual(0, memcmp(cString, copy, length));
    XCTAssertEqual(length, strlen(copy));
    XCTAssertEqual('\0', copy[strlen(copy)]);

    free((void *)copy);
}


- (void)testCopyContents_ChineseString_PerfectCopy
{
    const char *cString = [self longChineseString].UTF8String;
    size_t length = [[self longChineseString] lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    tsearch_stringbuf_append_cstring(_mutableStringPtr, cString, length);

    const char *copy = tsearch_stringbuf_copy_cstring(_mutableStringPtr);
    XCTAssertEqual(0, memcmp(cString, copy, length));
    XCTAssertEqual(length, strlen(copy));
    XCTAssertEqual('\0', copy[strlen(copy)]);

    free((void *)copy);
}


// ------------------------------------------------------------------------------------------
#pragma mark - Helpers
// ------------------------------------------------------------------------------------------
- (void)assertCString:(const char *)cString1 isEqualToCString:(const char *)cString2 length:(size_t)length
{
    for (size_t i = 0; i < length; i++)
    {
        XCTAssertEqual(cString1[i], cString2[i]);
    }
}


- (NSString *)longChineseString
{
    return @"é¶çº§æäºï¼ä¸äºé¶çº§èå©äºï¼ä¸äºé¶çº§æ¶ç­äºãè¿å°±æ¯åå²ï¼è¿å°±æ¯å åå¹´æ¥çææå²ãæ¿è¿ä¸ªè§ç¹è§£éåå²çå°±å«ååå²çå¯ç©ä¸»ä¹ï¼ç«å¨è¿ä¸ªè§ç¹çåé¢çæ¯åå²çå¯å¿ä¸»ä¹ããä¸¢æå¹»æ³ï¼åå¤æäºãï¼ä¸ä¹åä¹å¹´å«æååæ¥ï¼ï¼ãæ¯æ³½ä¸ééãç¬¬åå·ç¬¬ä¸åä¹ä¸é¡µãå°ä¸»é¶çº§å¯¹äºåæ°çæ®é·çç»æµå¥ååæ¿æ²»åè¿«ï¼è¿«ä½¿åæ°å¤æ¬¡å°ä¸¾è¡èµ·ä¹ï¼ä»¥åæå°ä¸»é¶çº§çç»æ²»ãâ¦â¦å¨ä¸­å½å°å»ºç¤¾ä¼éï¼åªæè¿äºåæ°çé¶çº§æäºãåæ°çèµ·ä¹ååæ°çæäºï¼ææ¯åå²åå±ççæ­£å¨åããä¸­å½é©å½åä¸­å½å±äº§åãï¼ä¸ä¹ä¸ä¹å¹´åäºæï¼ãäººæ°é æä»¬å»ç»ç»ï¼ä¸­å½çåå¨åå­ï¼é æä»¬ç»ç»èµ·äººæ°å»æä»æåãå¡æ¯åå¨çä¸è¥¿ï¼ä½ ä¸æï¼ä»å°±ä¸åãè¿ä¹åæ«å°ä¸æ ·ï¼æ«å¸ä¸å°ï¼ç°å°ç§ä¾ä¸ä¼èªå·±è·æããææ¥æäºèå©åçæ¶å±åæä»¬çæ¹éãï¼ä¸ä¹åäºå¹´å«æåä¸æ¥ï¼ãæ¯æ³½ä¸ééãç¬¬åå·ä¸ä¸ä¸ä¸é¡µãé©å½ä¸æ¯è¯·å®¢åé¥­ï¼ä¸æ¯åæç« ï¼ä¸æ¯ç»ç»ç»£è±ï¼ä¸è½é£æ ·éè´ï¼é£æ ·ä»å®¹ä¸è¿«ï¼æè´¨å½¬å½¬ï¼é£æ ·æ¸©è¯æ­ä¿­è®©ãé©å½æ¯æ´å¨ï¼æ¯ä¸ä¸ªé¶çº§æ¨ç¿»å¦ä¸ä¸ªé¶çº§çæ´ççè¡å¨ããæ¹ååæ°è¿å¨èå¯æ¥åãï¼ä¸ä¹äºä¸å¹´ä¸æï¼ãä»ä¹äººç«å¨é©å½äººæ°æ¹é¢ï¼ä»å°±æ¯é©å½æ´¾ï¼ä»ä¹äººç«å¨å¸å½ä¸»ä¹å°å»ºä¸»ä¹å®åèµæ¬ä¸»ä¹æ¹é¢ï¼ä»å°±æ¯åé©å½æ´¾ãä»ä¹äººåªæ¯å£å¤´ä¸ç«å¨é©å½äººæ°æ¹é¢èå¨è¡å¨ä¸åå¦æ¯ä¸æ ·ï¼ä»å°±æ¯ä¸ä¸ªå£å¤´é©å½æ´¾ï¼å¦æä¸ä½å¨å£å¤´ä¸èä¸å¨è¡å¨ä¸ä¹ç«å¨é©å½äººæ°æ¹é¢ï¼ä»å°±æ¯ä¸ä¸ªå®å¨çé©å½æ´¾ãï¼ï¼å¨ä¸­å½äººæ°æ¿æ²»ååä¼è®®ç¬¬ä¸å±å¨å½å§åä¼ç¬¬äºæ¬¡ä¼è®®ä¸çé­å¹è¯ãï¼ä¸ä¹äºâå¹´å­æäºåä¸æ¥ï¼ï¼ä¸ä¹äºâå¹´å­æäºååæ¥ãäººæ°æ¥æ¥ããå¦è¥ä¸è¢«æäººåå¯¹ï¼é£å°±ä¸å¥½äºï¼é£ä¸å®æ¯åæäººåæµåæ±¡äºãå¦è¥è¢«æäººåå¯¹ï¼é£å°±å¥½äºï¼é£å°±è¯ææä»¬åæäººåæ¸ççº¿äºããè¢«æäººåå¯¹æ¯å¥½äºèä¸æ¯åäºãï¼ä¸ä¹ä¸ä¹å¹´äºæäºåå­æ¥ãå¨æ¿æªçæäººè¢«æ¶ç­ä»¥åï¼ä¸æ¿æªçæäººä¾ç¶å­å¨ï¼ä»ä»¬å¿ç¶å°è¦åæä»¬ä½ææ­»çæäºï¼æä»¬å³ä¸å¯ä»¥è½»è§è¿äºæäººãå¦ææä»¬ç°å¨ä¸æ¯è¿æ ·å°æåºé®é¢åè®¤è¯é®é¢ï¼æä»¬å°±è¦ç¯æå¤§çéè¯¯ããå¨ä¸­å½å±äº§åç¬¬ä¸å±ä¸­å¤®å§åä¼ç¬¬äºæ¬¡å¨ä½ä¼è®®ä¸çæ¥åãï¼ï¼ä¸ä¹åä¹å¹´ä¸æäºæ¥ï¼ï¼ãæ¯æ³½ä¸ééãç¬¬åå·ç¬¬ä¸åäºå«é¡µãå¨æå½ï¼è½ç¶ç¤¾ä¼ä¸»ä¹æ¹é ï¼å¨ææå¶æ¹é¢è¯´æ¥ï¼å·²ç»åºæ¬å®æï¼é©å½æ¶æçå¤§è§æ¨¡çæ¥é£æ´é¨å¼çç¾¤ä¼é¶çº§æäºå·²ç»åºæ¬ç»æï¼ä½æ¯ï¼è¢«æ¨ç¿»çå°ä¸»ä¹°åé¶çº§çæ®ä½è¿æ¯å­å¨ï¼èµäº§é¶çº§è¿æ¯å­å¨ï¼å°èµäº§é¶çº§ååå¨æ¹é ãé¶çº§æäºå¹¶æ²¡æç»æãæ äº§é¶çº§åèµäº§é¶çº§ä¹é´çé¶çº§æäºï¼åæ´¾æ¿æ²»åéä¹é´çé¶çº§æäºï¼æ äº§é¶çº§åèµäº§é¶çº§ä¹é´å¨æè¯å½¢ææ¹é¢çé¶çº§æäºï¼è¿æ¯é¿æçãæ²æçï¼ææ¶çè³æ¯å¾æ¿ççãæ äº§é¶çº§è¦æç§èªå·±çä¸çè§æ¹é ä¸çï¼èµäº§é¶çº§ä¹è¦æç§èªå·±çä¸çè§æ¹é ä¸çãå¨è¿ä¸æ¹é¢ï¼ç¤¾ä¼ä¸»ä¹åèµæ¬ä¸»ä¹ä¹é´è°èè°è´çé®é¢è¿æ²¡æçæ­£è§£å³ããå³äºæ­£ç¡®å¤çäººæ°åé¨çç¾çé®é¢ãï¼ä¸ä¹äºä¸å¹´äºæäºåä¸æ¥ï¼ï¼äººæ°åºçç¤¾ç¬¬äºå­ï¼ï¼äºä¸é¡µææ¡ä¸»ä¹åä¿®æ­£ä¸»ä¹é½æ¯è¿åé©¬åæä¸»ä¹çãé©¬åæä¸»ä¹ä¸å®è¦åååå±ï¼è¦éçå®è·µçåå±èåå±ï¼ä¸è½åæ»ä¸åãåæ­¢äºï¼èæ¯é£ä¹ä¸å¥ï¼å®å°±æ²¡æçå½äºãä½æ¯ï¼é©¬åæä¸»ä¹çåºæ¬ææ³åååæ¯ä¸è½è¿èçï¼è¿èäºå°±è¦ç¯éè¯¯ãç¨å½¢èä¸å­¦çè§ç¹çå¾é©¬åæä¸»ä¹çåºæ¬ååï¼è¿æ¯ææ¡ä¸»ä¹ãå¦å®é©¬åä¸»ä¹çåºæ¬ååï¼å¦å®é©¬åæä¸»ä¹çæ®éççï¼è¿å°±æ¯ä¿®æ­£ä¸»ä¹ãä¿®æ­£ä¸»ä¹æ¯ä¸ç§èµäº§é¶çº§ææ³ãä¿®æ­£ä¸»ä¹èæ¹æç¤¾ä¼ä¸»ä¹åèµæ¬ä¸»ä¹çåºå«ï¼æ¹ææ äº§é¶çº§ä¸æ¿åèµäº§é¶çº§ä¸æ¿çåºå«ãä»ä»¬æä¸»å¼ çï¼å¨å®éä¸å¹¶ä¸æ¯ç¤¾ä¼ä¸»ä¹è·¯çº¿ï¼èæ¯èµæ¬ä¸»ä¹è·¯çº¿ãå¨ç°å¨çæåµä¸ï¼ä¿®æ­£ä¸»ä¹æ¯æ¯ææ¡ä¸»ä¹æ´æå®³çä¸è¥¿ãæä»¬ç°å¨ææ³è·¯çº¿ä¸çä¸ä¸ªéè¦ä»»å¡ï¼å°±æ¯è¦å±å¼å¯¹ä¿®æ­£ä¸»ä¹çæ¹å¤ããå¨ä¸­å½å±äº§åå¨å½å®£ä¼ å·¥ä½ä¼è®®ä¸çè®²è¯ãï¼ä¸ä¹äºä¸å¹´ä¸æåäºæ¥ï¼ï¼äººæ°åºçç¤¾ç¬¬äºâï¼ï¼äºä¸é¡µãä¿®æ­£ä¸»ä¹ï¼æèå³å¾æºä¼ä¸»ä¹ï¼æ¯ä¸ç§èµäº§é¶çº§ææ½®ï¼å®æ¯ææ¡ä¸»ä¹ææ´å¤§çå±é©æ§ãä¿®æ­£ä¸»ä¹èï¼å³å¾æºä¼ä¸»ä¹èï¼å£å¤´ä¸ä¹æçé©¬åæä¸»ä¹ï¼ä»ä»¬ä¹å¨é£éæ»å»âææ¡ä¸»ä¹âãä½æ¯ä»ä»¬ææ»å»çæ­£æ¯é©¬åæä¸»ä¹çææ ¹æ¬çä¸è¥¿ãä»ä»¬åå¯¹æèæ­ªæ²å¯ç©è®ºåè¾©è¯æ³ï¼åå¯¹æèä¼å¾åå¼±äººæ°æ°ä¸»ä¸æ¿åå±äº§åçé¢å¯¼ï¼åå¯¹æèä¼å¾åå¼±æ¯æ¹é åç¤¾ä¼ä¸»ä¹å»ºè®¾ãå¨æå½ç¤¾ä¼ä¸»ä¹é©å½åå¾åºæ¬èå©ä»¥åï¼ç¤¾ä¼ä¸è¿æä¸é¨åäººæ¢¦æ³æ¢å¤èµæ¬ä¸»ä¹å¶åº¦ï¼ä»ä»¬è¦ä»åä¸ªæ¹é¢åå·¥äººé¶çº§è¿è¡æäºï¼åæ¬ææ³æ¹é¢çæäºãèå¨è¿ä¸ªæäºä¸­ï¼ä¿®æ­£ä¸»ä¹èå°±æ¯ä»ä»¬æå¥½çå©æããå³äºæ­£ç¡®å¤çäººæ°åé¨çç¾çé®é¢ãï¼ä¸ä¹äºä¸å¹´äºæäºåä¸æ¥ï¼äººæ°åºçç¤¾ç¬¬äºä¹ï¼ï¼ä¸âé¡µã";
}


@end
